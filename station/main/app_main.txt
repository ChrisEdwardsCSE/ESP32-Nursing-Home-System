/**
* LLL wifi tut
*/
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"

#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include "lwip/netdb.h"
#include "lwip/dns.h"

/** DEFINES **/
#define WIFI_SUCCESS 1 << 0
#define WIFI_FAILURE 1 << 1
#define TCP_SUCCESS 1 << 0
#define TCP_FAILURE 1 << 1
#define MAX_FAILURES 10

/** GLOBALS **/

// event group to contain status information
static EventGroupHandle_t wifi_event_group;

// retry tracker
static int s_retry_num = 0;

// task tag
static const char *TAG = "WIFI";
/** FUNCTIONS **/

//event handler for wifi events
/**
 * Gets called on wifi events (cfg'd for now to be on any wifi events)
 */
static void wifi_event_handler(void* arg, esp_event_base_t event_base,
                                int32_t event_id, void* event_data)
{
  // if wifi event & the event is a station_start
	if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START)
	{
		ESP_LOGI(TAG, "Connecting to AP...");
		esp_wifi_connect(); // connects to the wifi, think this will eventually call ip_event_handler
  // else if wifi even but it's station disconnected
	} else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED)
	{
    // track the failures we've had, 
		if (s_retry_num < MAX_FAILURES)
		{
			ESP_LOGI(TAG, "Reconnecting to AP...");
			esp_wifi_connect();
			s_retry_num++;
    // if num tries is above MAX_FAILURES, then set in status handler (wifi_event_group) that we've failed
		} else {
			xEventGroupSetBits(wifi_event_group, WIFI_FAILURE);
		}
	}
}

//event handler for ip events
/**
 * Gets called sometime after we connect to wifi (esp_wifi_connect in wifi_event_handler)
 * 
 */
static void ip_event_handler(void* arg, esp_event_base_t event_base,
                                int32_t event_id, void* event_data)
{
  // if it's an IP event and station got an IP from the network
	if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP)
	{
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data; // idk just get the event data
        ESP_LOGI(TAG, "STA IP: " IPSTR, IP2STR(&event->ip_info.ip));
        s_retry_num = 0;
        xEventGroupSetBits(wifi_event_group, WIFI_SUCCESS); // note in status tracker that we've had a WIFI SUCCESS
    }

}

/**
 * Connect to Wifi. cfgs wifi connect stuff. runs the inf wifi event loop.
 * Sets the event handlers for wifi/ip_event_handler and waits for them to execute
 * with a result. Stashes the result in status (WIFI_SUCCESS/FAILURE)
 */
esp_err_t connect_wifi()
{
	int status = WIFI_FAILURE;

	/** INITIALIZE ALL THE THINGS **/
	//initialize the esp network interface
	ESP_ERROR_CHECK(esp_netif_init());

	// initialize inf default running event loop
	ESP_ERROR_CHECK(esp_event_loop_create_default());

	// create wifi station in the wifi driver "we're going to do wifi, get ready"
	esp_netif_create_default_wifi_sta();

  /* set up wifi cfg for things like ssid, password, type of auth, etc.
  this one is default just for beginnings */
	wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
  ESP_ERROR_CHECK(esp_wifi_init(&cfg));

  /** EVENT LOOP CRAZINESS **/
  // this is what will hold the output of whatever outcomes/event happens (wifi success/failure)
	wifi_event_group = xEventGroupCreate();

  /* establish wifi event event handler if see WIFI_EVENT event of ESP_ANY_EVENT_ID 
  (any wifi event at all), then call wifi_event_handler. */
  esp_event_handler_instance_t wifi_handler_event_instance;
  ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                      ESP_EVENT_ANY_ID,
                                                      &wifi_event_handler,
                                                      NULL,
                                                      &wifi_handler_event_instance));

  /* establish IP event event handler; if IP_EVENT_STA_GOT_IP (we, the STA=station, got an
  IP) then call ip_event_handler. the ip_event_handler gets called sometime after we've connected
  to wifi */
  esp_event_handler_instance_t got_ip_event_instance;
  ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
                                                      IP_EVENT_STA_GOT_IP,
                                                      &ip_event_handler,
                                                      NULL,
                                                      &got_ip_event_instance));

  /** START THE WIFI DRIVER **/
  wifi_config_t wifi_config = {
      .sta = {
          .ssid = "chris' iphone 12",
          .password = "fatbitchfromthe6",
      .threshold.authmode = WIFI_AUTH_WPA2_PSK,
          .pmf_cfg = {
              .capable = true,
              .required = false
          },
      },
  };

  // set the wifi controller to be a station
  ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA) );

  // set the wifi config
  ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config) );

  // start the wifi driver; event loop kicks off
  ESP_ERROR_CHECK(esp_wifi_start());

  ESP_LOGI(TAG, "STA initialization complete");

  /** NOW WE WAIT, blocks waiting for the wifi_event_group (event output)
   * to be filled. and it's gonna be filled with either WIFI_SUCCESS or WIFI_FAILURE.
   * so we're waiting for wifi_event_handler to call esp_wifi_connect, which will then call
   * ip_event_handler and if successful, this will return a WIFI_SUCCESS bc we've cncted to wifi **/
  EventBits_t bits = xEventGroupWaitBits(wifi_event_group,
          WIFI_SUCCESS | WIFI_FAILURE,
          pdFALSE,
          pdFALSE,
          portMAX_DELAY);

  /* xEventGroupWaitBits() returns the bits (either WIFI_SUCCESS or WIFI_FAILURE) */
  if (bits & WIFI_SUCCESS) {
      ESP_LOGI(TAG, "Connected to ap");
      status = WIFI_SUCCESS;
  } else if (bits & WIFI_FAILURE) {
      ESP_LOGI(TAG, "Failed to connect to ap");
      status = WIFI_FAILURE;
  } else {
      ESP_LOGE(TAG, "UNEXPECTED EVENT");
      status = WIFI_FAILURE;
  }

  /* unregister the wifi & ip events b/c we've cncted already, don't want to keep trying to connect to more wifi */
  ESP_ERROR_CHECK(esp_event_handler_instance_unregister(IP_EVENT, IP_EVENT_STA_GOT_IP, got_ip_event_instance));
  ESP_ERROR_CHECK(esp_event_handler_instance_unregister(WIFI_EVENT, ESP_EVENT_ANY_ID, wifi_handler_event_instance));
  vEventGroupDelete(wifi_event_group); // delete the status container for the event loop

  return status;
}

// connect to the server and return the result
esp_err_t connect_tcp_server(void)
{
	struct sockaddr_in serverInfo = {0};
	char readBuffer[1024] = {0};

	serverInfo.sin_family = AF_INET;
	serverInfo.sin_addr.s_addr = 0x0100007f; // ip address
	serverInfo.sin_port = htons(12345); // hard-coded port


	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock < 0)
	{
		ESP_LOGE(TAG, "Failed to create a socket..?");
		return TCP_FAILURE;
	}

  // connect to server using ip addr & port
	if (connect(sock, (struct sockaddr *)&serverInfo, sizeof(serverInfo)) != 0)
	{
		ESP_LOGE(TAG, "Failed to connect to %s!", inet_ntoa(serverInfo.sin_addr.s_addr));
		close(sock);
		return TCP_FAILURE;
	}

	ESP_LOGI(TAG, "Connected to TCP server.");
	bzero(readBuffer, sizeof(readBuffer));
    int r = read(sock, readBuffer, sizeof(readBuffer)-1);
    for(int i = 0; i < r; i++) {
        putchar(readBuffer[i]);
    }

    if (strcmp(readBuffer, "HELLO") == 0)
    {
    	ESP_LOGI(TAG, "WE DID IT!");
    }

    return TCP_SUCCESS;
}

void app_main(void)
{
	esp_err_t status = WIFI_FAILURE;

	// init NVS, stores wifi config stuff
  esp_err_t ret = nvs_flash_init();
  // if no free pages in flash, clear & re-init flash so we have room
  if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
    ESP_ERROR_CHECK(nvs_flash_erase());
    ret = nvs_flash_init();
  }
  ESP_ERROR_CHECK(ret);

  // connect to wireless AP, kicks off all the stuff. returns WIFI_SUCCESS/FAILURE
	status = connect_wifi();
	if (WIFI_SUCCESS != status)
	{
    // we've failed > MAX_FAILURES times so just fail
		ESP_LOGI(TAG, "Failed to associate to AP, dying...");
		return;
	}
	
	status = connect_tcp_server();
	if (TCP_SUCCESS != status)
	{
		ESP_LOGI(TAG, "Failed to connect to remote server, dying...");
		return;
	}
}